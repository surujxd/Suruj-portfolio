/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for contact information. Each user can only access their own contact details.
 *
 * Data Structure:
 * Contact information is stored under the `/users/{userId}/contactInfo` path.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations require authentication and ownership validation.
 * - The 'id' field within contactInfo documents must match the userId path segment to enforce ownership.
 *
 * Denormalization for Authorization:
 * The 'id' field inside the contactInfo document must match the 'userId' path to avoid needing complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the /users/{userId}/contactInfo collection, ensuring only the owner can read and write their contact information.
     * @path /users/{userId}/contactInfo
     * @allow (create) User with ID 'user123' creates contactInfo document with id: 'user123'.
     * @deny (create) User with ID 'user456' attempts to create contactInfo document under /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/contactInfo {
      // Read rules
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Define helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}